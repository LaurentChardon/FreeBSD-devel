---
# Playbook to remove all packages and perform a fresh package install.

- name: Remove all packages and reinstall clean environment
  hosts: freebsd_target
  gather_facts: yes
  vars:
    base_packages:
      - cmake
      - doas
      - git
      - htop
      - mutt
      - neofetch
      - neovim
      - nginx
      - sudo
      - tmux
      - todo
      - zsh
      - zsh-autosuggestions
      - zsh-syntax-highlighting
    xfce_packages:
      - lightdm
      - lightdm-gtk-greeter
      - xfce4-clipman-plugin
      - xfce4-cpugraph-plugin
      - xfce4-docklike-plugin
      - xfce4-genmon-plugin
      - xfce4-wm-themes
    gnome_packages:
      - gnome-desktop
      - gnome-menus
    gui_packages:
      - firefox
      - kitty
      - xfce
      - xorg
    optional_packages:
      - ccache
      - distcc
      - gcc
      - gmake
      - hwloc2
      - libtool
      - munge
      - ninja
      - node
      - perl5
      - pkgconf
      - portfmt
      - portgrep
      - portlint
      - poudriere-devel
      - py311-sphinx
      - rust-nightly


  pre_tasks:
    - name: Detect the current user's shell using getent
      command: getent passwd "{{ ansible_user_id }}"
      register: user_shell_info

    - name: Save the user's login shell
      set_fact:
        original_shell: "{{ user_shell_info.stdout.split(':')[-1] | trim }}"

    - name: Change the user's shell to /bin/sh ({{ ansible_user_id }})
      become: yes
      user:
        name: "{{ ansible_user_id }}"
        shell: /bin/sh

    - name: Reset SSH connection to force new login shell
      meta: reset_connection

  tasks:  
    - name: Detect PCI hardware
      command: pciconf -lv
      register: pci_devices

    - name: Record Nvidia detection
      set_fact:
        has_nvidia: true
      when: pci_devices.stdout | regex_search('(?i)nvidia')

    - name: Add nvidia-drm-kmod to optional_packages if Nvidia is detected
      set_fact:
        optional_packages: "{{ optional_packages + ['nvidia-drm-kmod'] }}"
      when: has_nvidia is defined and has_nvidia

    - name: Record Radeon detection
      set_fact:
        has_radeon: true
      when: pci_devices.stdout | regex_search('(?i)radeon')

    - name: Add xf86-video-amdgpu to optional_packages if Radeon is detected
      set_fact:
        optional_packages: "{{ optional_packages + ['drm-kmod'] }}"
      when: has_radeon is defined and has_radeon

    - name: Remove all installed packages except essential
      become: yes
      shell: |
        pkg delete -afy
        IGNORE_OSVERSION=yes /usr/sbin/pkg bootstrap -y
        IGNORE_OSVERSION=yes pkg update -f
        pkg install -y python sudo

    - name: Install base packages
      become: yes
      pkgng:
        name: "{{ base_packages }}"
        state: present

    - name: Install gnome packages
      become: yes
      pkgng:
        name: "{{ gnome_packages }}"
        state: present

    - name: Install GUI packages
      become: yes
      pkgng:
        name: "{{ gui_packages }}"
        state: present

    - name: Install optional packages
      become: yes
      pkgng:
        name: "{{ optional_packages }}"
        state: present

  post_tasks:
    - name: Restore the user's original shell
      become: yes
      user:
        name: "{{ ansible_user_id }}"
        shell: "{{ original_shell }}"
      when: original_shell is defined and original_shell != ""
